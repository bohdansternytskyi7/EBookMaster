// <auto-generated />
using System;
using EBookMasterWebApi.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EBookMasterWebApi.Migrations
{
    [DbContext(typeof(EBookMasterDbContext))]
    partial class EBookMasterDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("AuthorsId")
                        .HasColumnType("int");

                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.HasKey("AuthorsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("AuthorBook");

                    b.HasData(
                        new
                        {
                            AuthorsId = 1,
                            BooksId = 1
                        },
                        new
                        {
                            AuthorsId = 1,
                            BooksId = 2
                        },
                        new
                        {
                            AuthorsId = 2,
                            BooksId = 3
                        },
                        new
                        {
                            AuthorsId = 2,
                            BooksId = 4
                        },
                        new
                        {
                            AuthorsId = 3,
                            BooksId = 5
                        },
                        new
                        {
                            AuthorsId = 8,
                            BooksId = 8
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 8
                        },
                        new
                        {
                            AuthorsId = 5,
                            BooksId = 7
                        },
                        new
                        {
                            AuthorsId = 6,
                            BooksId = 6
                        },
                        new
                        {
                            AuthorsId = 1,
                            BooksId = 3
                        },
                        new
                        {
                            AuthorsId = 6,
                            BooksId = 7
                        });
                });

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.HasKey("BooksId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("BookCategory");

                    b.HasData(
                        new
                        {
                            BooksId = 1,
                            CategoriesId = 1
                        },
                        new
                        {
                            BooksId = 2,
                            CategoriesId = 1
                        },
                        new
                        {
                            BooksId = 3,
                            CategoriesId = 1
                        },
                        new
                        {
                            BooksId = 4,
                            CategoriesId = 1
                        },
                        new
                        {
                            BooksId = 8,
                            CategoriesId = 8
                        },
                        new
                        {
                            BooksId = 7,
                            CategoriesId = 8
                        },
                        new
                        {
                            BooksId = 6,
                            CategoriesId = 7
                        },
                        new
                        {
                            BooksId = 6,
                            CategoriesId = 6
                        },
                        new
                        {
                            BooksId = 5,
                            CategoriesId = 2
                        });
                });

            modelBuilder.Entity("BookRecommendation", b =>
                {
                    b.Property<int>("RecommendationsId")
                        .HasColumnType("int");

                    b.Property<int>("RecommendedBooksId")
                        .HasColumnType("int");

                    b.HasKey("RecommendationsId", "RecommendedBooksId");

                    b.HasIndex("RecommendedBooksId");

                    b.ToTable("BookRecommendation");
                });

            modelBuilder.Entity("EBookMasterWebApi.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "John",
                            Nationality = "American",
                            Surname = "Doe"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(1975, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jane",
                            Nationality = "British",
                            Surname = "Smith"
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(1990, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Michael",
                            Nationality = "Canadian",
                            Surname = "Johnson"
                        },
                        new
                        {
                            Id = 4,
                            DateOfBirth = new DateTime(1985, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Emily",
                            Nationality = "Australian",
                            Surname = "Brown"
                        },
                        new
                        {
                            Id = 5,
                            DateOfBirth = new DateTime(1970, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pierre",
                            Nationality = "French",
                            Surname = "Davis"
                        },
                        new
                        {
                            Id = 6,
                            DateOfBirth = new DateTime(1995, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hans",
                            Nationality = "German",
                            Surname = "Müller"
                        },
                        new
                        {
                            Id = 7,
                            DateOfBirth = new DateTime(1988, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Francesca",
                            Nationality = "Italian",
                            Surname = "Bianchi"
                        },
                        new
                        {
                            Id = 8,
                            DateOfBirth = new DateTime(1965, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Carlos",
                            Nationality = "Spanish",
                            Surname = "García"
                        },
                        new
                        {
                            Id = 9,
                            DateOfBirth = new DateTime(1978, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sakura",
                            Nationality = "Japanese",
                            Surname = "Yamamoto"
                        },
                        new
                        {
                            Id = 10,
                            DateOfBirth = new DateTime(1983, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Arjun",
                            Nationality = "Indian",
                            Surname = "Patel"
                        });
                });

            modelBuilder.Entity("EBookMasterWebApi.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPremium")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublicationYear")
                        .HasColumnType("datetime2");

                    b.Property<int>("PublishingHouseId")
                        .HasColumnType("int");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("PublishingHouseId");

                    b.HasIndex("SeriesId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsPremium = true,
                            PublicationYear = new DateTime(1954, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublishingHouseId = 1,
                            SeriesId = 1,
                            Status = 1,
                            Title = "The Fellowship of the Ring"
                        },
                        new
                        {
                            Id = 2,
                            IsPremium = false,
                            PublicationYear = new DateTime(1954, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublishingHouseId = 1,
                            SeriesId = 1,
                            Status = 1,
                            Title = "The Two Towers"
                        },
                        new
                        {
                            Id = 3,
                            IsPremium = false,
                            PublicationYear = new DateTime(1997, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublishingHouseId = 2,
                            SeriesId = 2,
                            Status = 1,
                            Title = "Harry Potter and the Philosopher's Stone"
                        },
                        new
                        {
                            Id = 4,
                            IsPremium = true,
                            PublicationYear = new DateTime(1998, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublishingHouseId = 2,
                            SeriesId = 2,
                            Status = 1,
                            Title = "Harry Potter and the Chamber of Secrets"
                        },
                        new
                        {
                            Id = 5,
                            IsPremium = true,
                            PublicationYear = new DateTime(1988, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublishingHouseId = 1,
                            Status = 1,
                            Title = "A Brief History of Time"
                        },
                        new
                        {
                            Id = 6,
                            IsPremium = true,
                            PublicationYear = new DateTime(2008, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublishingHouseId = 2,
                            SeriesId = 6,
                            Status = 1,
                            Title = "The Hunger Games"
                        },
                        new
                        {
                            Id = 7,
                            IsPremium = false,
                            PublicationYear = new DateTime(2009, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublishingHouseId = 2,
                            SeriesId = 6,
                            Status = 1,
                            Title = "Catching Fire"
                        },
                        new
                        {
                            Id = 8,
                            IsPremium = false,
                            PublicationYear = new DateTime(2010, 8, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublishingHouseId = 2,
                            SeriesId = 6,
                            Status = 1,
                            Title = "Mockingjay"
                        });
                });

            modelBuilder.Entity("EBookMasterWebApi.Models.BookBorrowing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BorrowingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("BookBorrowings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 2,
                            BorrowingDate = new DateTime(2024, 5, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            ReturnDate = new DateTime(2024, 6, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 3,
                            BorrowingDate = new DateTime(2024, 6, 1, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            ReturnDate = new DateTime(2024, 7, 1, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            BookId = 4,
                            BorrowingDate = new DateTime(2024, 6, 10, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            ReturnDate = new DateTime(2024, 7, 10, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            BookId = 2,
                            BorrowingDate = new DateTime(2024, 7, 5, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            BookId = 1,
                            BorrowingDate = new DateTime(2024, 5, 15, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            ReturnDate = new DateTime(2024, 6, 15, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            BookId = 5,
                            BorrowingDate = new DateTime(2024, 7, 20, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            ReturnDate = new DateTime(2024, 8, 20, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            BookId = 6,
                            BorrowingDate = new DateTime(2024, 8, 1, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("EBookMasterWebApi.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Narrative literature created from the imagination.",
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Literature based on facts, real events, and real people.",
                            Name = "Non-Fiction"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Literature dealing with futuristic settings and advanced technologies.",
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Literature featuring magical and supernatural elements.",
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Literature detailing the life of a real person.",
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Literature based on historical events and figures.",
                            Name = "History"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Literature dealing with the solution of a crime or unraveling of secrets.",
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Literature designed to hold the interest by the use of a high degree of intrigue, adventure, or suspense.",
                            Name = "Thriller"
                        });
                });

            modelBuilder.Entity("EBookMasterWebApi.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("EBookMasterWebApi.Models.PublishingHouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FoundationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PublishingHouses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "United States",
                            FoundationDate = new DateTime(2013, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Penguin Random House"
                        },
                        new
                        {
                            Id = 2,
                            Country = "United States",
                            FoundationDate = new DateTime(1989, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "HarperCollins"
                        },
                        new
                        {
                            Id = 3,
                            Country = "United States",
                            FoundationDate = new DateTime(1924, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Simon & Schuster"
                        },
                        new
                        {
                            Id = 4,
                            Country = "United Kingdom",
                            FoundationDate = new DateTime(1843, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Macmillan Publishers"
                        },
                        new
                        {
                            Id = 5,
                            Country = "France",
                            FoundationDate = new DateTime(1826, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hachette Livre"
                        });
                });

            modelBuilder.Entity("EBookMasterWebApi.Models.Recommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("EBookMasterWebApi.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AverageRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("BorrowCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("EBookMasterWebApi.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookBorrowingId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookBorrowingId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookBorrowingId = 1,
                            Description = "Great book, highly recommended!",
                            Rate = 4
                        },
                        new
                        {
                            Id = 2,
                            BookBorrowingId = 2,
                            Description = "Interesting read, but could be improved.",
                            Rate = 3
                        },
                        new
                        {
                            Id = 3,
                            BookBorrowingId = 3,
                            Description = "Absolutely loved it, couldn't put it down!",
                            Rate = 5
                        },
                        new
                        {
                            Id = 4,
                            BookBorrowingId = 4,
                            Description = "Not as good as I expected.",
                            Rate = 2
                        },
                        new
                        {
                            Id = 5,
                            BookBorrowingId = 5,
                            Description = "An excellent read!",
                            Rate = 5
                        });
                });

            modelBuilder.Entity("EBookMasterWebApi.Models.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FirstBookPublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOver")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Series");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstBookPublicationDate = new DateTime(1954, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOver = true,
                            Name = "The Lord of the Rings"
                        },
                        new
                        {
                            Id = 2,
                            FirstBookPublicationDate = new DateTime(1997, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOver = true,
                            Name = "Harry Potter"
                        },
                        new
                        {
                            Id = 3,
                            FirstBookPublicationDate = new DateTime(1996, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOver = false,
                            Name = "A Song of Ice and Fire"
                        },
                        new
                        {
                            Id = 4,
                            FirstBookPublicationDate = new DateTime(1950, 10, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOver = true,
                            Name = "The Chronicles of Narnia"
                        },
                        new
                        {
                            Id = 5,
                            FirstBookPublicationDate = new DateTime(1887, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOver = true,
                            Name = "Sherlock Holmes"
                        },
                        new
                        {
                            Id = 6,
                            FirstBookPublicationDate = new DateTime(2008, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOver = true,
                            Name = "The Hunger Games"
                        },
                        new
                        {
                            Id = 7,
                            FirstBookPublicationDate = new DateTime(2005, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOver = true,
                            Name = "Percy Jackson & the Olympians"
                        },
                        new
                        {
                            Id = 8,
                            FirstBookPublicationDate = new DateTime(2011, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOver = true,
                            Name = "Divergent"
                        });
                });

            modelBuilder.Entity("EBookMasterWebApi.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Period = 1,
                            Price = 9.99m,
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            Period = 1,
                            Price = 14.99m,
                            Type = 2
                        },
                        new
                        {
                            Id = 3,
                            Period = 2,
                            Price = 100m,
                            Type = 1
                        },
                        new
                        {
                            Id = 4,
                            Period = 2,
                            Price = 150m,
                            Type = 2
                        });
                });

            modelBuilder.Entity("EBookMasterWebApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LibraryCardNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("RefreshTokenExpiration")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserSubscriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserSubscriptionId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "s26028@pjwstk.edu.pl",
                            LibraryCardNumber = 1,
                            Name = "Bohdan",
                            Password = "jZs/vfkieZcdBngxPAHzXuEDi5XZg0tOXXdtUooa1ag=",
                            Role = 1,
                            Salt = "mZ5bf60ttVt+4Xx6FHpvFHx+Vx/pPUoYql9QO+G9t3Y=",
                            Surname = "Sternytskyi",
                            UserSubscriptionId = 1
                        });
                });

            modelBuilder.Entity("EBookMasterWebApi.Models.UserSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("UserSubscriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BeginDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubscriptionId = 4
                        });
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("EBookMasterWebApi.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EBookMasterWebApi.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.HasOne("EBookMasterWebApi.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EBookMasterWebApi.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookRecommendation", b =>
                {
                    b.HasOne("EBookMasterWebApi.Models.Recommendation", null)
                        .WithMany()
                        .HasForeignKey("RecommendationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EBookMasterWebApi.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("RecommendedBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EBookMasterWebApi.Models.Book", b =>
                {
                    b.HasOne("EBookMasterWebApi.Models.PublishingHouse", "PublishingHouse")
                        .WithMany("Books")
                        .HasForeignKey("PublishingHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EBookMasterWebApi.Models.Series", "Series")
                        .WithMany("Books")
                        .HasForeignKey("SeriesId");

                    b.Navigation("PublishingHouse");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("EBookMasterWebApi.Models.BookBorrowing", b =>
                {
                    b.HasOne("EBookMasterWebApi.Models.Book", "Book")
                        .WithMany("BookBorrowings")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EBookMasterWebApi.Models.User", "User")
                        .WithMany("BookBorrowings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EBookMasterWebApi.Models.Notification", b =>
                {
                    b.HasOne("EBookMasterWebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EBookMasterWebApi.Models.Recommendation", b =>
                {
                    b.HasOne("EBookMasterWebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EBookMasterWebApi.Models.Report", b =>
                {
                    b.HasOne("EBookMasterWebApi.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("EBookMasterWebApi.Models.Review", b =>
                {
                    b.HasOne("EBookMasterWebApi.Models.BookBorrowing", "BookBorrowing")
                        .WithMany()
                        .HasForeignKey("BookBorrowingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookBorrowing");
                });

            modelBuilder.Entity("EBookMasterWebApi.Models.User", b =>
                {
                    b.HasOne("EBookMasterWebApi.Models.UserSubscription", "UserSubscription")
                        .WithMany()
                        .HasForeignKey("UserSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserSubscription");
                });

            modelBuilder.Entity("EBookMasterWebApi.Models.UserSubscription", b =>
                {
                    b.HasOne("EBookMasterWebApi.Models.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("EBookMasterWebApi.Models.Book", b =>
                {
                    b.Navigation("BookBorrowings");
                });

            modelBuilder.Entity("EBookMasterWebApi.Models.PublishingHouse", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("EBookMasterWebApi.Models.Series", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("EBookMasterWebApi.Models.User", b =>
                {
                    b.Navigation("BookBorrowings");
                });
#pragma warning restore 612, 618
        }
    }
}
